//
// Quake game definition file (.fgd)
// for Worldcraft 1.6 and above
//
// written by autolycus / autolycus@planetquake.com
// email me with improvements and suggestions
//

// Modified by CZG : grawert@online.no : http://www.planetquake.com/greyvoid/

// Modified by Vigil for Rubicon 2
// Download Rubicon 2 from http://www.celephais.net
// Rubicon 2 created by John "metlslime" Fitzgibbons and Christian "CZG" Grawert
// Entity comments mostly copied from metlslime's rubicon2.def

//
// worldspawn
//

@SolidClass = worldspawn : "World entity"
[
	message(string) : "Text on entering the world"
	worldtype(choices) : "Ambience" : 0 =
	[
		0 : "Medieval"
		1 : "Runic (metal)"
		2 : "Present (base)"
	]
	sounds(integer) : "CD track to play" : 1
	light(integer) : "Ambient light"
	_sunlight(integer) : "Sunlight"
	_sun_mangle(string) : "Sun mangle (Yaw pitch roll)"
]

//
// base marker definitions
//

@baseclass = Appearflags [
	spawnflags(Flags) =
	[
		256 : "Not in Easy" : 0
		512 : "Not in Normal" : 0
		1024 : "Not in Hard" : 0
		2048 : "Not in Deathmatch" : 0
	]
]

@baseclass = Targetname [ targetname(target_source) : "Name" ]
@baseclass = Target [ 
	target(target_destination) : "Target" 
	killtarget(target_destination) : "Killtarget"
]


@baseclass color(255 255 40) = Light [
	light(integer) : "Brightness" : 300
	wait(integer) : "Fade distance multiplier" : 1
	delay(choices) : "Attenuation" =
	[
		0 : "Linear falloff (Default)"
		1 : "Inverse distance falloff"
		2 : "Inverse distance squared"
		3 : "No falloff"
	]
	style(Choices) : "Appearance" : 0 =
	[
		0 : "Normal"
		10: "Fluorescent flicker"
		2 : "Slow, strong pulse"
		11: "Slow pulse, noblack"
		5 : "Gentle pulse"
		1 : "Flicker A"
		6 : "Flicker B"
		3 : "Candle A"
		7 : "Candle B"
		8 : "Candle C"
		4 : "Fast strobe"
		9 : "Slow strobe"
	]

	spawnflags(Flags) = [ 1 : "Initially dark" : 0 ]
]

//
// Rubicon 2 specific additions
// New enemies have been added to the monster section
//


// FUNC_EXPLOBOX
// expolobox works just like misc_explobox

@SolidClass base(Appearflags, Targetname, Target) color(255 128 128) = func_explobox : "An exploding brush entity.  Works just like misc_explobox." 
[
	health(integer) : "Health" : 20
	dmg(integer) : "Damage" : 100
	spawnflags(flags)=
	[
		1 : "Start off" : 0
	]
]

// FUNC_BREAKABLE
// breakable object
// NO_MONSTERS ignores damage from monsters
// cnt number of debris to spawn

@SolidClass base(Appearflags, Targetname, Target) color(255 128 128) = func_breakable : "A visible object that can be destroyed by shooting it. If it has a targetname, it will not be directly damageable.

NO_MONSTERS: object ignores damage from monsters" 
[
	cnt(integer) : "Debris amount" : 6 : "Number of pieces of debris to spawn."
	health(integer) : "Health" : 20
	style(choices) : "Debris color" : 0 = 
	[
        0: "Green metal"
		1: "Red metal"
		2: "Concrete"
	]
	spawnflags(flags) =
	[
		1 : "No monsters" : 0
	]
]

// FUNC_LASER
// toggleable laser, damages on touch

@SolidClass base(Appearflags, Targetname, Target) color(255 128 128) = func_laser : "A togglable laser, hurts to touch, can be used to block players." 
[
	dmg(integer) : "Damage" : 1
	alpha(integer) : "Opacity" : 0.5 : "Approximate alpha you want the laser drawn at. default 0.5. alpha will vary by 20% of this value."
	message(string) : "Activated message"
	message2(string) : "Deactivated message"
	spawnflags(flags) =
	[
		1 : "Starts off" : 0
		2 : "Solid" : 0
	]
]

// FUNC_TURRET
// A rotating laser shooter that aims at the player in any horizontal direction. Has a capped rotation speed based on skill setting. When triggered, toggles between active and inactive states
// START_OFF spawns in the inactive state.
// Place in the level in the active/attacking position for proper lighting.
// See Rubicon 2 for examples of use.
// MOVEDIR the offset from active position to the initial START_OFF position 
// MOVEDIR2 the offset from the active position to the deactivated position (after being previously active)
// HEIGHT the position that laser originates, measured up from the very bottom of the model
// ANGLE determines the initial turret direction (horizontal directions only)
// SPEED speed when moving to a new position
// SOUNDS sounds to use when moving to a new position

@SolidClass base(Appearflags, Targetname, Target) color(255 255 128) = func_turret : "A rotating laser shooter that aims at the player in any horizontal direction. Has a capped rotation speed based on skill setting. When triggered, toggles between active and inactive states" 
[
	movedir(string) : "Active to start_off" : : "the offset from active position to the initial START_OFF position"
	movedir2(string) : "Active to deactive" : : "the offset from the active position to the deactivated position (after being previously active)"
	height(integer) : "Height" : 32 : "the position that laser originates, measured up from the very bottom of the model"
	speed(integer) : "Speed" : 100 : "speed when moving to a new position"
	sounds(choices) : "Sound" : 0 = 
	[
        0: "No sounds"
		1: "Stone"
		2: "Machine"
		3: "Stone Chain"
		4: "Screechy Metal"
	]
	spawnflags(flags) =
	[
		1 : "Starts off" : 0
	]
]


// TRIGGER_LADDER
// invisible ladder entity. when player is touching this entity, he can climb by pushing 'jump'
// use ANGLE to determine which direction players must face

@SolidClass base(Appearflags, Targetname, Target) color(128 128 64) = trigger_ladder : "Ladder" []

// INFO_ROTATE
// Used as the point of rotation for rotatable objects.

@PointClass base(Appearflags, Targetname, Target) color(128 128 64) size(-4 -4 -4, 4 4 4) = info_rotate : "info_rotate" []

// FUNC_MOVEWALL
// Used to emulate collision on rotating objects.

@SolidClass base(Appearflags, Targetname, Target) color(0 0 255) = func_movewall : "Rotating collision"
[
	dmg(integer) : "Damage" : 0
	spawnflags(flags) =
	[
		1 : "Visible" : 0
		2 : "Hurts" : 0
		4 : "Non-solid" : 0
	]
]

// FUNC_ROTATE_DOOR
// Creates a door that rotates between two positions around a point of
// rotation each time it's triggered.

@SolidClass base(Appearflags, Targetname, Target) color(64 128 64) = func_rotate_door : "Rotating door"
[
	dmg(integer) : "Damage" : 0
	speed(integer) : "Speed" : 100
	sounds(choices) : "Sound" =
	[
		0: "No sounds"
		1: "Stone"
		2: "Machine"
		3: "Stone Chain"
		4: "Screechy Metal"
	]
	spawnflags(flags) =
	[
		1 : "Stay open" : 0
	]
]

// FUNC_ROTATE_ENTITY
// Creates an entity that continually rotates.  Can be toggled on and off if targeted.

@SolidClass base(Appearflags, Targetname) color(64 128 64) = func_rotate_entity : "Rotating entity"
[
	deathtype(string) : "Death message"
	rotate(integer) : "Speed" : 40
	target(string) : "Center of rotation"
	speed(integer) : "Acceleration" : 5
	spawnflags(flags) =
	[
		1 : "Toggle" : 0
		2 : "Start on" : 0
	]
]

// FUNC_ROTATE_TRAIN
// In path_rotate, set speed to be the new speed of the train after it reaches
// the path change.  If speed is -1, the train will warp directly to the next
// path change after the specified wait time.  If MOVETIME is set on the
// path_rotate, the train to interprets "speed" as the length of time to
// take moving from one corner to another.

// "noise" contains the name of the sound to play when train stops.
// "noise1" contains the name of the sound to play when train moves.
// Both "noise" and "noise1" defaults depend upon "sounds" variable and
// can be overridden by the "noise" and "noise1" variable in path_rotate.

// Also in path_rotate, if STOP is set, the train will wait until it is
// retriggered before moving on to the next goal.

// Trains are moving platforms that players can ride.
// "path" specifies the first path_rotate and is the starting position.
// If the train is the target of a button or trigger, it will not begin moving until activated.
// The func_rotate_train entity is the center of rotation of all objects targeted by it.

@SolidClass base(Appearflags, Targetname, Target) color(64 128 64) = func_rotate_train : "Rotating train"
[
	noise(string) : "Stop sound"
	noise1(string) : "Start sound"
	sounds(choices) : "Sound" =
	[
		0 : "No sounds"
		1 : "Ratchet metal"
	]
	deathtype(string) : "Death message"
	speed(integer) : "Speed" : 100
	dmg(integer) : "Damage if blocked" : 0
]

// PATH_ROTATE
// Path for rotate_train.
// ROTATION tells train to rotate at rate specified by "rotate".  Use '0 0 0' to stop rotation.
// ANGLES tells train to rotate to the angles specified by "angles" while traveling to this path_rotate.  Use values < 0 or > 360 to guarantee that it turns in a certain direction.  Having this flag set automatically clears any rotation.
// STOP tells the train to stop and wait to be retriggered.
// NO_ROTATE tells the train to stop rotating when waiting to be triggered.
// DAMAGE tells the train to cause damage based on "dmg".
// MOVETIME tells the train to interpret "speed" as the length of time to take moving from one corner to another.
// SET_DAMAGE tells the train to set all targets damage to "dmg"

@PointClass base(Appearflags, Targetname, Target) color(64 128 64) = path_rotate : "Rotating train path"
[
	spawnflags(flags) =
	[
		1 : "Rotation" : 0
		2 : "Angles" : 0
		4 : "Stop" : 0
		8 : "Waiting" : 0
		16 : "Damaging" : 0
		32 : "Movetime" : 0
		64 : "Target dmg" : 0
	]
	rotate(string) : "Speed (X Y Z)"
	angles(string) : "Angles (X Y Z)"
	dmg(integer) : "Damage" : 0
	noise(string) : "Stop sound"
	noise1(string) : "Start sound"
	event(string) : "Event target"
]




//
// player starts, deathmatch, coop, teleport
//

@baseclass base(Appearflags) size(-16 -16 -24, 16 16 32) 
	color(0 255 0) = PlayerClass []

@PointClass base(PlayerClass) = info_player_start : "Player 1 start" []
@PointClass base(PlayerClass) = info_player_coop : "Player cooperative start" []
@PointClass base(PlayerClass) = info_player_start2 : "Player episode return point" []
@PointClass base(PlayerClass) = info_player_deathmatch : "DM start" []
@PointClass size(-32 -32 0, 32 32 64) base(PlayerClass, Targetname) = info_teleport_destination : "Teleport destination" []
@PointClass = info_null : "info_null (spotlight target)"
[
	targetname(target_source) : "Name" 
]

@PointClass base(Target, Targetname) = info_notnull : "info_notnull (spotlight target)" // I <3 you
[
	use(string) : "self.use"
	think(string) : "self.think"
	nextthink(integer) : "nextthink"
	noise(string) : "noise"
	wait(integer) : "wait"
]
@PointClass base(Appearflags) = info_intermission : "Intermission camera" 
[
	mangle(string) : "Mangle (Pitch Yaw Roll)"
]

//
// items
//
@baseclass base(Target, Targetname) = Item
[
	message(string) : "Message"
]
@baseclass size(0 0 0, 32 32 32) color(80 0 200) base(Item, Appearflags) = Ammo
[
	spawnflags(flags) = 
	[
		1 : "Large box" : 0
	]
]

@PointClass base(Ammo) = item_cells : "Thunderbolt ammo" []
@PointClass size(0 0 0, 32 16 32) base(Ammo) = item_rockets : "Rockets" []
@PointClass base(Ammo) = item_shells : "Shells" []
@PointClass base(Ammo) = item_spikes : "Perforator/Nailgun ammo" []

@PointClass size(0 0 0, 32 32 16) base(Appearflags) = item_health : "Health pak" 
[
	spawnflags(flags) = 
	[
		1 : "Rotten" : 0
		2 : "Megahealth" : 0
	]
]

@PointClass base(Item, Appearflags) = 
	item_artifact_envirosuit : "Environmental protection suit" []
@PointClass base(Item, Appearflags) = 
	item_artifact_super_damage : "Quad damage" []
@PointClass base(Item, Appearflags) = 
	item_artifact_invulnerability : "Pentagram of Protection" []
@PointClass base(Item, Appearflags) = 
	item_artifact_invisibility : "Ring of Shadows" []

@PointClass size(-16 -16 0, 16 16 56) base(Item, Appearflags) = 
	item_armorInv : "200% armor (Red)" []
@PointClass size(-16 -16 0, 16 16 56) base(Item, Appearflags) = 
	item_armor2 : "150% armor (Yellow)" []
@PointClass size(-16 -16 0, 16 16 56) base(Item, Appearflags) = 
	item_armor1 : "100% armor (Green)" []
@PointClass size(-16 -16 -24, 16 16 32) base(Item, Appearflags) = 
	item_key1 : "Silver key" []
@PointClass size(-16 -16 -24, 16 16 32) base(Item, Appearflags) = 
	item_key2 : "Gold key" []
@PointClass size(-16 -16 -24, 16 16 32) base(Item, Appearflags) = 
	item_sigil : "Sigil" 
[
	spawnflags(Flags) =
	[
		1 : "Episode 1" : 1
		2 : "Episode 2" : 0
		4 : "Episode 3" : 0
		8 : "Episode 4" : 0
	]
]

// ITEM_CIRCUITBOARD
// Collectible circuit board thingie

@PointClass base(Appearflags, Targetname, Target) size(0 0 0, 32 32 32) color(255 255 32) = item_circuitboard : "Circuit board" []


//
// weaponses
// added shotgun & axe for Rubicon 2
//

@baseclass size(-16 -16 0, 16 16 32) color(0 0 200) base(Item, Appearflags) = Weapon []

@PointClass base(Weapon) model({"path": "progs/g_axe.mdl"}) = weapon_axe : "Axe." []
@PointClass base(Weapon) model({"path": "progs/g_shotgn.mdl"}) = weapon_shotgun : "Shotgun." []
@PointClass base(Weapon) model({"path": "progs/.mdl"}) = weapon_supershotgun : "Super shotgun" []
@PointClass base(Weapon) model({"path": "progs/.mdl"}) = weapon_nailgun : "Nailgun" []
@PointClass base(Weapon) model({"path": "progs/.mdl"}) = weapon_supernailgun : "Perforator" []
@PointClass base(Weapon) model({"path": "progs/.mdl"}) = weapon_grenadelauncher : "Grenade launcher" []
@PointClass base(Weapon) model({"path": "progs/.mdl"}) = weapon_rocketlauncher : "Rocket launcher" []
@PointClass base(Weapon) model({"path": "progs/.mdl"}) = weapon_lightning : "Thunderbolt" []

//
// badasses
// added enemies for Rubicon 2
//

@baseclass base(Appearflags, Target, Targetname) color(220 0 0) = Monster 
[
	spawnflags(Flags) = 
	[
		1 : "Ambush" : 0
		64 : "Spawned" : 0
		128 : "Silent" : 0
	]
]

// Rubicon 2 monsters first
// Centurion, 150 hp
@PointClass base(Monster) size(-32 -32 -24, 32 32 64) = monster_centurion : "Centurion" []
// Dreadnaught, 150 hp
@PointClass base(Monster) size(-16 -16 -24, 16 16 40) = monster_dreadnaught : "Dreadnaught" []
// Floyd automaton robot, 200 hp
// ROLLING Floyd is on his back and helpless, explodes after taking 75 damage
// ASLEEP Floyd will not respond to anything unless he is shot or his targetname is triggered
@PointClass base(Appearflags, Target, Targetname) size(-32 -32 -24, 32 32 64) = monster_floyd : "Automaton"
[
	spawnflags(flags) =
	[
		1 : "Ambush" : 0
		2 : "Rolling" : 0
		4 : "Asleep" : 0
	]
]

// Regular monsters
		
@PointClass base(Monster) size(-16 -16 -24, 16 16 40) = monster_army : "Grunt" []
@PointClass base(Monster) size(-32 -32 -24, 32 32 40) = monster_dog : "Nasty Doggie" []
@PointClass base(Monster) size(-32 -32 -24, 32 32 64) = monster_ogre : "Ogre" []
@PointClass base(Monster) size(-32 -32 -24, 32 32 64) = monster_ogre_marksman : "Ogre marksman" []
@PointClass base(Monster) size(-16 -16 -24, 16 16 40) = monster_knight : "Knight" []
@PointClass base(Monster) size(-16 -16 -24, 16 16 40) = monster_hell_knight : "Hell knight" []
@PointClass base(Monster) size(-16 -16 -24, 16 16 40) = monster_wizard : "Scrag" []
@PointClass base(Monster) size(-32 -32 -24, 32 32 64) = monster_demon1 : "Fiend" []
@PointClass base(Monster) size(-32 -32 -24, 32 32 64) = monster_shambler : "Shambler" []
@PointClass base(Monster) size(-128 -128 -24, 128 128 256) = monster_boss : "Chthon" []
@PointClass base(Monster) size(-16 -16 -24, 16 16 40) = monster_enforcer : "Enforcer" []
@PointClass base(Monster) size(-32 -32 -24, 32 32 48) = monster_shalrath : "Shalrath" []
@PointClass base(Monster) size(32 32 48) = monster_tarbaby : "Tarbaby" []
@PointClass base(Monster) size(32 32 48) = monster_fish : "Rotfish" []
@PointClass base(Monster) size(-16 -16 -24, 16 16 32) = monster_oldone : "Shub-Niggurath" []
@PointClass base(Monster) size(-16 -16 -24, 16 16 32) = monster_zombie : "Zombie" 
[
	spawnflags(Flags) = 
	[
		1 : "Crucified" : 0
		2 : "Ambush" : 0
	]
]

//
// lights
//



@PointClass size(-8 -8 -8, 8 8 8) base(Light, Target, Targetname) = 
	light : "Invisible lightsource"	[mangle(string) : "Spotlight angle"]
@PointClass size(-8 -8 -8, 8 8 8) base(Light, Target, Targetname) = 
	light_fluoro : "Fluorescent light" [mangle(string) : "Spotlight angle"]
@PointClass size(-8 -8 -8, 8 8 8) base(Light, Target, Targetname) = 
	light_fluorospark : "Sparking fluorescent light" [mangle(string) : "Spotlight angle"]
@PointClass size(-8 -8 -8, 8 8 8) base(Light, Target, Targetname) = 
	light_globe : "Globe light" []

@PointClass size(-8 -8 -12, 8 8 20) base(Light, Target, Targetname) model({ "path": ":progs/flame2.mdl" }) = 
	light_flame_large_yellow : "Large yellow flame" []
@PointClass size(-4 -4 -12, 4 4 20) base(Light, Target, Targetname) model({ "path": ":progs/flame2.mdl" }) = 
	light_flame_small_yellow : "Small yellow flame" []
@PointClass size(-4 -4 -12, 4 4 20) base(Light, Target, Targetname) model({ "path": ":progs/flame2.mdl" }) = 
	light_flame_small_white : "Small white flame" []

@PointClass size(-4 -4 -12, 4 4 20) base(Light, Target, Targetname) model({ "path": ":progs/flame.mdl" }) = 
	light_torch_small_walltorch : "Small walltorch" []



// LIGHT_FIXTURE1
// Wall-mounted light fixture
// ANGLE2 is the angle the model should be facing; set it to face away from the wall

@PointClass base(Appearflags, Targetname, Target, Light) size(0 0 0, 16 16 32) color(255 255 64) model({"path":"progs/fixture1.mdl"})= light_fixture1 : "Wall-mounted light fixture."
[
	angle2(string) : "Angle" : : "The angle the model should be facing; set it to face away from the wall"
]


@PointClass base(Appearflags, Targetname, Target, Light) size(0 0 0, 16 16 32) color(255 255 64)  model({"path": "progs/beacon.mdl"}) = light_beacon : "Floor-mounted flashing red beacon
Set spawnflag 'Blinking' if you want the beacon to blink (set style to 16 to match the skin animation.)"
[
	angle2(string) : "Angle" : : "The angle the model should be facing; set it to face away from the wall"
	style(choices) : "Appearance" : 0 =
	[
		16 : "Match blinking animation"
	]
	spawnflags(flags) =
	[
		1 : "Blinking (also set style 16)" : 0
	]
]

//
// misc
//

@PointClass base(Appearflags, Name) = air_bubbles : "Air bubbles" []
@PointClass base(Appearflags, Targetname) = event_lightning : "Chthon's lightning" []
@PointClass base(Appearflags) = misc_fireball : "Small fireball"
	[ speed(integer) : "Speed" : 40 ]
@PointClass size(0 0 0, 32 32 64)  = misc_explobox : "Large nuclear container" []
@PointClass size(0 0 0, 32 32 32)  = misc_explobox2 : "Small nuclear container" []
@SolidClass = func_illusionary : "Static model" []
@PointClass = func_illusionary2 : "Static model"  
[
	frame(integer)
	model(string)
]
@PointClass base(Targetname) = trap_spikeshooter : "Triggered shooter" 
[
	spawnflags(Flags) = 
	[
		1 : "Superspike" : 0
		2 : "Laser" : 0
	]
]
@PointClass base(trap_spikeshooter) = trap_shooter : "Continuous shooter" []


// MISC_SPARKS
// Produces a burst of yellow sparks at random intervals. If targeted, it will toggle between on or off.  If it targets a light, that light will flash allong with each burst of sparks. Note: targeted lights should be set to START_OFF.

@PointClass base(Appearflags, Targetname, Target) size(0 0 0, 16 16 16) color(255 255 128) = misc_sparks : "Yellow sparks"
[
	wait(integer) : "Avg delay between sparks" : 2
	cnt(integer) : "Avg amount of sparks" : 15
	sounds(choices) : "Sounds" =
	[
		0 : "No sound"
		1 : "Spark sounds"
	]
	spawnflags(flags) =
	[
		1 : "Starts off" : 0
		2 : "Blue sparks" : 0
		4 : "Pale yellow sparks" : 0
	]
]

// MISC_SMOKE
// Produces a jet of smoke/steam. If targeted, it will toggle between on or off.	
	
@PointClass base(Appearflags, Targetname, Target) size(0 0 0, 16 16 16) color(255 255 128) = misc_smoke : "Smoke jet"
[
	wait(integer) : "Time between puffs" : 1
	movedir(string) : "Initial velocity (X Y Z)"
	movedir2(string) : "Wind direction (X Y Z)"
	dmg(integer) : "Damage" : 0
	sounds(choices) : "Sounds" =
	[
		0 : "No sounds"
		1 : "Steam hiss"
	]
	spawnflags(flags) =
	[
		1 : "Starts off" : 0
	]
]

// MISC_SPLASH
// Produces a continuous particle splash for waterfalls

@PointClass base(Appearflags, Targetname, Target) size(0 0 0, 16 16 16) color(255 255 200) = misc_splash : "Water splash"
[
	color(integer) : "Color (0-15)" : 0
	movedir(string) : "Move vector (X Y Z)"
	wait(integer) : "Time between cycles" : 1
	volume(integer) : "Density" : 10
]



// MISC_FLAG
// A hanging banner, gently waving in the wind. Normal dimensions: 64 wide by 144 long.
// BIG Banner is twice as big: 128 wide by 288 long.

@PointClass base(Appearflags, Targetname, Target) size(0 0 0, 4 64 144) color(255 255 64) model({"path":"progs/flag.mdl"}) = misc_flag : "Flag"
[	
	spawnflags(flags) =
	[
		1 : "Not animated" : 0
		2 : "Big one" : 0
	]
]



// 
// ambient sounds
// added Rubicon 2 ambient_general
//

@Pointclass size(-8 -8 -8, 8 8 8) = ambient_general : "Ambient sounds"
[
	noise(string) : "File to play"
	volume(integer) : "Volume (0-1)" : 1
	speed(integer) : "Attenuation" : 3
]
@PointClass = ambient_drip : "Dripping sound" []
@PointClass = ambient_drone : "Engine/machinery sound" []
@PointClass = ambient_comp_hum : "Computer background sounds" []
@PointClass = ambient_flouro_buzz : "Fluorescent buzzing sound" []
@PointClass = ambient_light_buzz : "Buzzing sound from light" []
@PointClass = ambient_suck_wind : "Wind sound" []
@PointClass = ambient_swamp1 : "Frogs croaking" []
@PointClass = ambient_swamp2 : "Frogs croaking B" []
@PointClass = ambient_thunder : "Thunder sound" []

// 
// moving things
//


@SolidClass base(Appearflags, Targetname, Target) = func_door : "Basic door" 
[
	speed(integer) : "Speed" : 100
	sounds(choices) : "Sound" : 0 = 
	[
                0: "No sounds"
		1: "Stone"
		2: "Machine"
		3: "Stone Chain"
		4: "Screechy Metal"
		5: "Custom sounds"
	]
	noise2(string) : "Move sound"
 	noise1(string) : "Stop sound"
	wait(string) : "Delay before close" : "4" 
	lip(integer) : "Lip" : 8
	dmg(integer) : "Damage inflicted when blocked" : 0
	message(string) : "Message if triggered"
	health(integer) : "Health (shoot open)" : 0
	spawnflags(flags) =
	[
		1 : "Starts Open" : 0
		4 : "Don't link" : 0
		8 : "Gold Key required" : 0
        16: "Silver Key required" : 0
        32: "Toggle" : 0
	]
]

@SolidClass base(Appearflags, Targetname, Target) = func_door_secret : "Triggered door" 
[
	t_width(integer) : "First move lenght"
	t_length(integer) : "Second move lenght"
	dmg(integer) : "Damage when blocked" : 2
	wait(string) : "Time before close" : "2"
	sounds(choices) : "Sounds" : 3 =
	[
		1: "Medieval"
		2: "Metal"
		3: "Base"
	]
	message(string) : "Message"
	spawnflags(flags) = 
	[
		1 : "Open once only" : 0
		2 : "Moves left first" : 0
		4 : "Moves down first" : 0
		8 : "Not shootable" : 0
           16 : "Always shootable" : 0
	]
]

@SolidClass base(Targetname, Appearflags) = func_wall : "Wall" []


@SolidClass base(Targetname) = func_button : "Button" 
[
	speed(integer) : "Speed" : 40
	lip(integer) : "Lip" : 4
	target(target_source) : "Targetted object"
	health(integer) : "Health (shootable if > 0)"
	sounds(choices) : "Sounds" = 
	[
		0 : "Steam metal"
		1 : "Wooden clunk"
		2 : "Metallic clink"
		3 : "In-out"
	]
	wait(string) : "Delay before reset" : "1"
	delay(string) : "Delay before trigger"
	message(string) : "Message" 
]

@SolidClass base(Targetname) = func_train : "Moving platform" 
[
	sounds(choices) : "Sound" : 1 =
	[
		0: "None"
		1: "Ratchet Metal"
	]
	speed(integer) : "Speed (units per second)" : 64
	target(target_source) : "First stop target"
	dmg(integer) : "Damage on crush" : 0
]

@PointClass base(Targetname) size(16 16 16) = 
	path_corner : "Moving platform stop"
[
	target(target_source) : "Next stop target"
	wait(integer) : "Wait" : 0
]

@SolidClass base(Targetname) = func_plat : "Elevator" 
[	
	spawnflags(Flags) =
	[
		1 : "Low trigger" : 0
	]
	speed(integer) : "Speed" : 150
	height(integer) : "Travel altitude (can be negative)" : 0
	sounds(choices) : "Sound group" : 1 =
	[
		0: "None"
		1: "Base fast"
		2: "Chain Slow"
	]
]	

@SolidClass = func_episodegate : "Episode Gate"
[
	spawnflags(Flags) =
	[
		1 : "Episode 1" : 1
		2 : "Episode 2" : 0
		4 : "Episode 3" : 0
		8 : "Episode 4" : 0
	]
]

@SolidClass = func_bossgate : "Boss gate" []

//
// triggers
//

@baseclass base(Target, Targetname) = Trigger
[
	sounds(choices) : "Sound style" : 0 =
	[
		0 : "None"
		1 : "Secret sound"
		2 : "Beep beep"
		3 : "Large switch"
		4 : "Set message to text string"
	]
	delay(string) : "Delay before trigger" : "0"
	message(string) : "Message (set sound too!)"
]

@SolidClass= trigger_changelevel : "Trigger: Change level"
[
	map(string) : "New map name"
	target(target_destination) : "Target"
	spawnflags(flags) =
	[
		1: "No Intermission" : 0
	]
]

@SolidClass base(Trigger) = trigger_once : "Trigger: Activate once"
[
	health(integer) : "Health"
	spawnflags(flags) = [ 1: "Entity only" : 0 ]
]
@SolidClass base(Trigger) = trigger_multiple : "Trigger: Activate multiple" 
[
	wait(string) : "Wait before reset" : "4"
	health(integer) : "Health"
	spawnflags(flags) = [ 1: "Entity only" : 0 ]
]
@SolidClass base(Trigger) = trigger_onlyregistered : "Trigger: Registered only" 
[
	spawnflags(flags) = [ 1: "Entity only" : 0 ]
]
@SolidClass base(Trigger) = trigger_secret : "Trigger: Secret" 
[
	sounds(choices) : "Sound style" : 1 =
	[
		0 : "None"
		1 : "Secret sound"
		2 : "Beep beep"
		3 : "Large switch"
		4 : "Set message to text string"
	]
	spawnflags(flags) = [ 1: "Entity only" : 0 ]
]

@SolidClass base(Target, Targetname) = trigger_teleport : "Trigger teleport" 
[
	spawnflags(Flags) =
	[
		1 : "Player only" : 0
		2 : "Silent" : 0
	]
]

// need updates:

@SolidClass = trigger_setskill : "Trigger set skill" 
[
	message(choices) : "Skill to change to" : 1 =
	[
        0 : "Easy"
        1 : "Medium"
        2 : "Hard"
        3 : "Nightmare!"
	]
]
@PointClass base(Trigger) = trigger_relay : "Trigger relay"
[
]
@SolidClass base(Targetname) = trigger_monsterjump : "Trigger monster jump" 
[
	speed(integer) : "Jump Speed" : 200
	height(integer) : "Jump Height" : 200
]
@PointClass base(Target, Targetname) = trigger_counter : "Trigger counter" 
[
	spawnflags(flags) = [ 1: "No Message" : 0 ]
	count(integer) : "Count before activation" : 2
]
@SolidClass base(Targetname) = trigger_push : "Trigger player push"
[
	spawnflags(flags) = [ 1: "Once Only" : 0 ]
	speed(integer) : "Speed of push" : 1000
]
@SolidClass  base(Targetname) = trigger_hurt : "Trigger player hurt" 
[
	dmg(integer) : "Damage" : 5
	wait(integer) : "Delay before reset"
	message(string) : "Message"
]

